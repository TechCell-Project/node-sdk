/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * The documentations of the TechCell RESTful API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddSpuModelDto } from '../models';
// @ts-ignore
import { CreateSpuDto } from '../models';
// @ts-ignore
import { SPU } from '../models';
// @ts-ignore
import { SpuInfinityPaginationResult } from '../models';
// @ts-ignore
import { UpdateSPUModelSchemaDto } from '../models';
// @ts-ignore
import { UpdateSpuDto } from '../models';
/**
 * SpusApi - axios parameter creator
 * @export
 */
export const SpusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddSpuModelDto} addSpuModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerAddSpuModels: async (id: string, addSpuModelDto: AddSpuModelDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sPUControllerAddSpuModels', 'id', id)
            // verify required parameter 'addSpuModelDto' is not null or undefined
            assertParamExists('sPUControllerAddSpuModels', 'addSpuModelDto', addSpuModelDto)
            const localVarPath = `/api/spus/{id}/models`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSpuModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSpuDto} createSpuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerCreateSPU: async (createSpuDto: CreateSpuDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSpuDto' is not null or undefined
            assertParamExists('sPUControllerCreateSPU', 'createSpuDto', createSpuDto)
            const localVarPath = `/api/spus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerGetSPU: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sPUControllerGetSPU', 'id', id)
            const localVarPath = `/api/spus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterSpuDto
         * @param {string} [sort] JSON string of SortSpuDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerGetSPUs: async (page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/spus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSpuDto} updateSpuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerUpdateSPU: async (id: string, updateSpuDto: UpdateSpuDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sPUControllerUpdateSPU', 'id', id)
            // verify required parameter 'updateSpuDto' is not null or undefined
            assertParamExists('sPUControllerUpdateSPU', 'updateSpuDto', updateSpuDto)
            const localVarPath = `/api/spus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSpuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} slug 
         * @param {UpdateSPUModelSchemaDto} updateSPUModelSchemaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerUpdateSpuModel: async (id: string, slug: string, updateSPUModelSchemaDto: UpdateSPUModelSchemaDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sPUControllerUpdateSpuModel', 'id', id)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('sPUControllerUpdateSpuModel', 'slug', slug)
            // verify required parameter 'updateSPUModelSchemaDto' is not null or undefined
            assertParamExists('sPUControllerUpdateSpuModel', 'updateSPUModelSchemaDto', updateSPUModelSchemaDto)
            const localVarPath = `/api/spus/{id}/models/{slug}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSPUModelSchemaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpusApi - functional programming interface
 * @export
 */
export const SpusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddSpuModelDto} addSpuModelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPUControllerAddSpuModels(id: string, addSpuModelDto: AddSpuModelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPUControllerAddSpuModels(id, addSpuModelDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpusApi.sPUControllerAddSpuModels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateSpuDto} createSpuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPUControllerCreateSPU(createSpuDto: CreateSpuDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPUControllerCreateSPU(createSpuDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpusApi.sPUControllerCreateSPU']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPUControllerGetSPU(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPUControllerGetSPU(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpusApi.sPUControllerGetSPU']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterSpuDto
         * @param {string} [sort] JSON string of SortSpuDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPUControllerGetSPUs(page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpuInfinityPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPUControllerGetSPUs(page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpusApi.sPUControllerGetSPUs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSpuDto} updateSpuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPUControllerUpdateSPU(id: string, updateSpuDto: UpdateSpuDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPUControllerUpdateSPU(id, updateSpuDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpusApi.sPUControllerUpdateSPU']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} slug 
         * @param {UpdateSPUModelSchemaDto} updateSPUModelSchemaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPUControllerUpdateSpuModel(id: string, slug: string, updateSPUModelSchemaDto: UpdateSPUModelSchemaDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPUControllerUpdateSpuModel(id, slug, updateSPUModelSchemaDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpusApi.sPUControllerUpdateSpuModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpusApi - factory interface
 * @export
 */
export const SpusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpusApiFp(configuration)
    return {
        /**
         * 
         * @param {SpusApiSPUControllerAddSpuModelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerAddSpuModels(requestParameters: SpusApiSPUControllerAddSpuModelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sPUControllerAddSpuModels(requestParameters.id, requestParameters.addSpuModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpusApiSPUControllerCreateSPURequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerCreateSPU(requestParameters: SpusApiSPUControllerCreateSPURequest, options?: RawAxiosRequestConfig): AxiosPromise<SPU> {
            return localVarFp.sPUControllerCreateSPU(requestParameters.createSpuDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpusApiSPUControllerGetSPURequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerGetSPU(requestParameters: SpusApiSPUControllerGetSPURequest, options?: RawAxiosRequestConfig): AxiosPromise<SPU> {
            return localVarFp.sPUControllerGetSPU(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpusApiSPUControllerGetSPUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerGetSPUs(requestParameters: SpusApiSPUControllerGetSPUsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SpuInfinityPaginationResult> {
            return localVarFp.sPUControllerGetSPUs(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpusApiSPUControllerUpdateSPURequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerUpdateSPU(requestParameters: SpusApiSPUControllerUpdateSPURequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sPUControllerUpdateSPU(requestParameters.id, requestParameters.updateSpuDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpusApiSPUControllerUpdateSpuModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPUControllerUpdateSpuModel(requestParameters: SpusApiSPUControllerUpdateSpuModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sPUControllerUpdateSpuModel(requestParameters.id, requestParameters.slug, requestParameters.updateSPUModelSchemaDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sPUControllerAddSpuModels operation in SpusApi.
 * @export
 * @interface SpusApiSPUControllerAddSpuModelsRequest
 */
export interface SpusApiSPUControllerAddSpuModelsRequest {
    /**
     * 
     * @type {string}
     * @memberof SpusApiSPUControllerAddSpuModels
     */
    readonly id: string

    /**
     * 
     * @type {AddSpuModelDto}
     * @memberof SpusApiSPUControllerAddSpuModels
     */
    readonly addSpuModelDto: AddSpuModelDto
}

/**
 * Request parameters for sPUControllerCreateSPU operation in SpusApi.
 * @export
 * @interface SpusApiSPUControllerCreateSPURequest
 */
export interface SpusApiSPUControllerCreateSPURequest {
    /**
     * 
     * @type {CreateSpuDto}
     * @memberof SpusApiSPUControllerCreateSPU
     */
    readonly createSpuDto: CreateSpuDto
}

/**
 * Request parameters for sPUControllerGetSPU operation in SpusApi.
 * @export
 * @interface SpusApiSPUControllerGetSPURequest
 */
export interface SpusApiSPUControllerGetSPURequest {
    /**
     * 
     * @type {string}
     * @memberof SpusApiSPUControllerGetSPU
     */
    readonly id: string
}

/**
 * Request parameters for sPUControllerGetSPUs operation in SpusApi.
 * @export
 * @interface SpusApiSPUControllerGetSPUsRequest
 */
export interface SpusApiSPUControllerGetSPUsRequest {
    /**
     * 
     * @type {number}
     * @memberof SpusApiSPUControllerGetSPUs
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SpusApiSPUControllerGetSPUs
     */
    readonly limit?: number

    /**
     * JSON string of FilterSpuDto
     * @type {string}
     * @memberof SpusApiSPUControllerGetSPUs
     */
    readonly filters?: string

    /**
     * JSON string of SortSpuDto[]
     * @type {string}
     * @memberof SpusApiSPUControllerGetSPUs
     */
    readonly sort?: string
}

/**
 * Request parameters for sPUControllerUpdateSPU operation in SpusApi.
 * @export
 * @interface SpusApiSPUControllerUpdateSPURequest
 */
export interface SpusApiSPUControllerUpdateSPURequest {
    /**
     * 
     * @type {string}
     * @memberof SpusApiSPUControllerUpdateSPU
     */
    readonly id: string

    /**
     * 
     * @type {UpdateSpuDto}
     * @memberof SpusApiSPUControllerUpdateSPU
     */
    readonly updateSpuDto: UpdateSpuDto
}

/**
 * Request parameters for sPUControllerUpdateSpuModel operation in SpusApi.
 * @export
 * @interface SpusApiSPUControllerUpdateSpuModelRequest
 */
export interface SpusApiSPUControllerUpdateSpuModelRequest {
    /**
     * 
     * @type {string}
     * @memberof SpusApiSPUControllerUpdateSpuModel
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof SpusApiSPUControllerUpdateSpuModel
     */
    readonly slug: string

    /**
     * 
     * @type {UpdateSPUModelSchemaDto}
     * @memberof SpusApiSPUControllerUpdateSpuModel
     */
    readonly updateSPUModelSchemaDto: UpdateSPUModelSchemaDto
}

/**
 * SpusApi - object-oriented interface
 * @export
 * @class SpusApi
 * @extends {BaseAPI}
 */
export class SpusApi extends BaseAPI {
    /**
     * 
     * @param {SpusApiSPUControllerAddSpuModelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpusApi
     */
    public sPUControllerAddSpuModels(requestParameters: SpusApiSPUControllerAddSpuModelsRequest, options?: RawAxiosRequestConfig) {
        return SpusApiFp(this.configuration).sPUControllerAddSpuModels(requestParameters.id, requestParameters.addSpuModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpusApiSPUControllerCreateSPURequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpusApi
     */
    public sPUControllerCreateSPU(requestParameters: SpusApiSPUControllerCreateSPURequest, options?: RawAxiosRequestConfig) {
        return SpusApiFp(this.configuration).sPUControllerCreateSPU(requestParameters.createSpuDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpusApiSPUControllerGetSPURequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpusApi
     */
    public sPUControllerGetSPU(requestParameters: SpusApiSPUControllerGetSPURequest, options?: RawAxiosRequestConfig) {
        return SpusApiFp(this.configuration).sPUControllerGetSPU(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpusApiSPUControllerGetSPUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpusApi
     */
    public sPUControllerGetSPUs(requestParameters: SpusApiSPUControllerGetSPUsRequest = {}, options?: RawAxiosRequestConfig) {
        return SpusApiFp(this.configuration).sPUControllerGetSPUs(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpusApiSPUControllerUpdateSPURequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpusApi
     */
    public sPUControllerUpdateSPU(requestParameters: SpusApiSPUControllerUpdateSPURequest, options?: RawAxiosRequestConfig) {
        return SpusApiFp(this.configuration).sPUControllerUpdateSPU(requestParameters.id, requestParameters.updateSpuDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpusApiSPUControllerUpdateSpuModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpusApi
     */
    public sPUControllerUpdateSpuModel(requestParameters: SpusApiSPUControllerUpdateSpuModelRequest, options?: RawAxiosRequestConfig) {
        return SpusApiFp(this.configuration).sPUControllerUpdateSpuModel(requestParameters.id, requestParameters.slug, requestParameters.updateSPUModelSchemaDto, options).then((request) => request(this.axios, this.basePath));
    }
}

