/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * The documentations of the TechCell RESTful API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Brand } from '../models';
// @ts-ignore
import { BrandInfinityPaginationResult } from '../models';
// @ts-ignore
import { CreateBrandDto } from '../models';
// @ts-ignore
import { UpdateBrandDto } from '../models';
/**
 * BrandsApi - axios parameter creator
 * @export
 */
export const BrandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBrandDto} createBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerCreateBrand: async (createBrandDto: CreateBrandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBrandDto' is not null or undefined
            assertParamExists('brandsControllerCreateBrand', 'createBrandDto', createBrandDto)
            const localVarPath = `/api/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerDeleteBrand: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('brandsControllerDeleteBrand', 'id', id)
            const localVarPath = `/api/brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerGetBrand: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('brandsControllerGetBrand', 'id', id)
            const localVarPath = `/api/brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterBrandsDto
         * @param {string} [sort] JSON string of SortBrandsDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerGetBrands: async (page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateBrandDto} updateBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerUpdateBrand: async (id: string, updateBrandDto: UpdateBrandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('brandsControllerUpdateBrand', 'id', id)
            // verify required parameter 'updateBrandDto' is not null or undefined
            assertParamExists('brandsControllerUpdateBrand', 'updateBrandDto', updateBrandDto)
            const localVarPath = `/api/brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandsApi - functional programming interface
 * @export
 */
export const BrandsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBrandDto} createBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerCreateBrand(createBrandDto: CreateBrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerCreateBrand(createBrandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandsApi.brandsControllerCreateBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerDeleteBrand(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerDeleteBrand(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandsApi.brandsControllerDeleteBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerGetBrand(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Brand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerGetBrand(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandsApi.brandsControllerGetBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterBrandsDto
         * @param {string} [sort] JSON string of SortBrandsDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerGetBrands(page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandInfinityPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerGetBrands(page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandsApi.brandsControllerGetBrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateBrandDto} updateBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerUpdateBrand(id: string, updateBrandDto: UpdateBrandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerUpdateBrand(id, updateBrandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrandsApi.brandsControllerUpdateBrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrandsApi - factory interface
 * @export
 */
export const BrandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandsApiFp(configuration)
    return {
        /**
         * 
         * @param {BrandsApiBrandsControllerCreateBrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerCreateBrand(requestParameters: BrandsApiBrandsControllerCreateBrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.brandsControllerCreateBrand(requestParameters.createBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BrandsApiBrandsControllerDeleteBrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerDeleteBrand(requestParameters: BrandsApiBrandsControllerDeleteBrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.brandsControllerDeleteBrand(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BrandsApiBrandsControllerGetBrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerGetBrand(requestParameters: BrandsApiBrandsControllerGetBrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<Brand> {
            return localVarFp.brandsControllerGetBrand(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BrandsApiBrandsControllerGetBrandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerGetBrands(requestParameters: BrandsApiBrandsControllerGetBrandsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BrandInfinityPaginationResult> {
            return localVarFp.brandsControllerGetBrands(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BrandsApiBrandsControllerUpdateBrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerUpdateBrand(requestParameters: BrandsApiBrandsControllerUpdateBrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.brandsControllerUpdateBrand(requestParameters.id, requestParameters.updateBrandDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for brandsControllerCreateBrand operation in BrandsApi.
 * @export
 * @interface BrandsApiBrandsControllerCreateBrandRequest
 */
export interface BrandsApiBrandsControllerCreateBrandRequest {
    /**
     * 
     * @type {CreateBrandDto}
     * @memberof BrandsApiBrandsControllerCreateBrand
     */
    readonly createBrandDto: CreateBrandDto
}

/**
 * Request parameters for brandsControllerDeleteBrand operation in BrandsApi.
 * @export
 * @interface BrandsApiBrandsControllerDeleteBrandRequest
 */
export interface BrandsApiBrandsControllerDeleteBrandRequest {
    /**
     * 
     * @type {string}
     * @memberof BrandsApiBrandsControllerDeleteBrand
     */
    readonly id: string
}

/**
 * Request parameters for brandsControllerGetBrand operation in BrandsApi.
 * @export
 * @interface BrandsApiBrandsControllerGetBrandRequest
 */
export interface BrandsApiBrandsControllerGetBrandRequest {
    /**
     * 
     * @type {string}
     * @memberof BrandsApiBrandsControllerGetBrand
     */
    readonly id: string
}

/**
 * Request parameters for brandsControllerGetBrands operation in BrandsApi.
 * @export
 * @interface BrandsApiBrandsControllerGetBrandsRequest
 */
export interface BrandsApiBrandsControllerGetBrandsRequest {
    /**
     * 
     * @type {number}
     * @memberof BrandsApiBrandsControllerGetBrands
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BrandsApiBrandsControllerGetBrands
     */
    readonly limit?: number

    /**
     * JSON string of FilterBrandsDto
     * @type {string}
     * @memberof BrandsApiBrandsControllerGetBrands
     */
    readonly filters?: string

    /**
     * JSON string of SortBrandsDto[]
     * @type {string}
     * @memberof BrandsApiBrandsControllerGetBrands
     */
    readonly sort?: string
}

/**
 * Request parameters for brandsControllerUpdateBrand operation in BrandsApi.
 * @export
 * @interface BrandsApiBrandsControllerUpdateBrandRequest
 */
export interface BrandsApiBrandsControllerUpdateBrandRequest {
    /**
     * 
     * @type {string}
     * @memberof BrandsApiBrandsControllerUpdateBrand
     */
    readonly id: string

    /**
     * 
     * @type {UpdateBrandDto}
     * @memberof BrandsApiBrandsControllerUpdateBrand
     */
    readonly updateBrandDto: UpdateBrandDto
}

/**
 * BrandsApi - object-oriented interface
 * @export
 * @class BrandsApi
 * @extends {BaseAPI}
 */
export class BrandsApi extends BaseAPI {
    /**
     * 
     * @param {BrandsApiBrandsControllerCreateBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    public brandsControllerCreateBrand(requestParameters: BrandsApiBrandsControllerCreateBrandRequest, options?: RawAxiosRequestConfig) {
        return BrandsApiFp(this.configuration).brandsControllerCreateBrand(requestParameters.createBrandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandsApiBrandsControllerDeleteBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    public brandsControllerDeleteBrand(requestParameters: BrandsApiBrandsControllerDeleteBrandRequest, options?: RawAxiosRequestConfig) {
        return BrandsApiFp(this.configuration).brandsControllerDeleteBrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandsApiBrandsControllerGetBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    public brandsControllerGetBrand(requestParameters: BrandsApiBrandsControllerGetBrandRequest, options?: RawAxiosRequestConfig) {
        return BrandsApiFp(this.configuration).brandsControllerGetBrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandsApiBrandsControllerGetBrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    public brandsControllerGetBrands(requestParameters: BrandsApiBrandsControllerGetBrandsRequest = {}, options?: RawAxiosRequestConfig) {
        return BrandsApiFp(this.configuration).brandsControllerGetBrands(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandsApiBrandsControllerUpdateBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    public brandsControllerUpdateBrand(requestParameters: BrandsApiBrandsControllerUpdateBrandRequest, options?: RawAxiosRequestConfig) {
        return BrandsApiFp(this.configuration).brandsControllerUpdateBrand(requestParameters.id, requestParameters.updateBrandDto, options).then((request) => request(this.axios, this.basePath));
    }
}

