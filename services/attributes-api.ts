/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * The documentations of the TechCell RESTful API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Attribute } from '../models';
// @ts-ignore
import { AttributeInfinityPaginationResult } from '../models';
// @ts-ignore
import { CreateAttributeDto } from '../models';
// @ts-ignore
import { UpdateAttributeDto } from '../models';
/**
 * AttributesApi - axios parameter creator
 * @export
 */
export const AttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAttributeDto} createAttributeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerCreateAttribute: async (createAttributeDto: CreateAttributeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAttributeDto' is not null or undefined
            assertParamExists('attributesControllerCreateAttribute', 'createAttributeDto', createAttributeDto)
            const localVarPath = `/api/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAttributeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerDeleteAttribute: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attributesControllerDeleteAttribute', 'id', id)
            const localVarPath = `/api/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerGetAttribute: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attributesControllerGetAttribute', 'id', id)
            const localVarPath = `/api/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterAttributeDto
         * @param {string} [sort] JSON string of SortAttributeDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerGetAttributes: async (page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAttributeDto} updateAttributeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerUpdateAttribute: async (id: string, updateAttributeDto: UpdateAttributeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attributesControllerUpdateAttribute', 'id', id)
            // verify required parameter 'updateAttributeDto' is not null or undefined
            assertParamExists('attributesControllerUpdateAttribute', 'updateAttributeDto', updateAttributeDto)
            const localVarPath = `/api/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export const AttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAttributeDto} createAttributeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributesControllerCreateAttribute(createAttributeDto: CreateAttributeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributesControllerCreateAttribute(createAttributeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributesApi.attributesControllerCreateAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributesControllerDeleteAttribute(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributesControllerDeleteAttribute(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributesApi.attributesControllerDeleteAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributesControllerGetAttribute(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributesControllerGetAttribute(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributesApi.attributesControllerGetAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterAttributeDto
         * @param {string} [sort] JSON string of SortAttributeDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributesControllerGetAttributes(page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeInfinityPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributesControllerGetAttributes(page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributesApi.attributesControllerGetAttributes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAttributeDto} updateAttributeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributesControllerUpdateAttribute(id: string, updateAttributeDto: UpdateAttributeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributesControllerUpdateAttribute(id, updateAttributeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributesApi.attributesControllerUpdateAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttributesApi - factory interface
 * @export
 */
export const AttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributesApiFp(configuration)
    return {
        /**
         * 
         * @param {AttributesApiAttributesControllerCreateAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerCreateAttribute(requestParameters: AttributesApiAttributesControllerCreateAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.attributesControllerCreateAttribute(requestParameters.createAttributeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttributesApiAttributesControllerDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerDeleteAttribute(requestParameters: AttributesApiAttributesControllerDeleteAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.attributesControllerDeleteAttribute(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttributesApiAttributesControllerGetAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerGetAttribute(requestParameters: AttributesApiAttributesControllerGetAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attribute> {
            return localVarFp.attributesControllerGetAttribute(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttributesApiAttributesControllerGetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerGetAttributes(requestParameters: AttributesApiAttributesControllerGetAttributesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AttributeInfinityPaginationResult> {
            return localVarFp.attributesControllerGetAttributes(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttributesApiAttributesControllerUpdateAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesControllerUpdateAttribute(requestParameters: AttributesApiAttributesControllerUpdateAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.attributesControllerUpdateAttribute(requestParameters.id, requestParameters.updateAttributeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for attributesControllerCreateAttribute operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesControllerCreateAttributeRequest
 */
export interface AttributesApiAttributesControllerCreateAttributeRequest {
    /**
     * 
     * @type {CreateAttributeDto}
     * @memberof AttributesApiAttributesControllerCreateAttribute
     */
    readonly createAttributeDto: CreateAttributeDto
}

/**
 * Request parameters for attributesControllerDeleteAttribute operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesControllerDeleteAttributeRequest
 */
export interface AttributesApiAttributesControllerDeleteAttributeRequest {
    /**
     * 
     * @type {string}
     * @memberof AttributesApiAttributesControllerDeleteAttribute
     */
    readonly id: string
}

/**
 * Request parameters for attributesControllerGetAttribute operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesControllerGetAttributeRequest
 */
export interface AttributesApiAttributesControllerGetAttributeRequest {
    /**
     * 
     * @type {string}
     * @memberof AttributesApiAttributesControllerGetAttribute
     */
    readonly id: string
}

/**
 * Request parameters for attributesControllerGetAttributes operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesControllerGetAttributesRequest
 */
export interface AttributesApiAttributesControllerGetAttributesRequest {
    /**
     * 
     * @type {number}
     * @memberof AttributesApiAttributesControllerGetAttributes
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AttributesApiAttributesControllerGetAttributes
     */
    readonly limit?: number

    /**
     * JSON string of FilterAttributeDto
     * @type {string}
     * @memberof AttributesApiAttributesControllerGetAttributes
     */
    readonly filters?: string

    /**
     * JSON string of SortAttributeDto[]
     * @type {string}
     * @memberof AttributesApiAttributesControllerGetAttributes
     */
    readonly sort?: string
}

/**
 * Request parameters for attributesControllerUpdateAttribute operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesControllerUpdateAttributeRequest
 */
export interface AttributesApiAttributesControllerUpdateAttributeRequest {
    /**
     * 
     * @type {string}
     * @memberof AttributesApiAttributesControllerUpdateAttribute
     */
    readonly id: string

    /**
     * 
     * @type {UpdateAttributeDto}
     * @memberof AttributesApiAttributesControllerUpdateAttribute
     */
    readonly updateAttributeDto: UpdateAttributeDto
}

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export class AttributesApi extends BaseAPI {
    /**
     * 
     * @param {AttributesApiAttributesControllerCreateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public attributesControllerCreateAttribute(requestParameters: AttributesApiAttributesControllerCreateAttributeRequest, options?: RawAxiosRequestConfig) {
        return AttributesApiFp(this.configuration).attributesControllerCreateAttribute(requestParameters.createAttributeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttributesApiAttributesControllerDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public attributesControllerDeleteAttribute(requestParameters: AttributesApiAttributesControllerDeleteAttributeRequest, options?: RawAxiosRequestConfig) {
        return AttributesApiFp(this.configuration).attributesControllerDeleteAttribute(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttributesApiAttributesControllerGetAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public attributesControllerGetAttribute(requestParameters: AttributesApiAttributesControllerGetAttributeRequest, options?: RawAxiosRequestConfig) {
        return AttributesApiFp(this.configuration).attributesControllerGetAttribute(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttributesApiAttributesControllerGetAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public attributesControllerGetAttributes(requestParameters: AttributesApiAttributesControllerGetAttributesRequest = {}, options?: RawAxiosRequestConfig) {
        return AttributesApiFp(this.configuration).attributesControllerGetAttributes(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttributesApiAttributesControllerUpdateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public attributesControllerUpdateAttribute(requestParameters: AttributesApiAttributesControllerUpdateAttributeRequest, options?: RawAxiosRequestConfig) {
        return AttributesApiFp(this.configuration).attributesControllerUpdateAttribute(requestParameters.id, requestParameters.updateAttributeDto, options).then((request) => request(this.axios, this.basePath));
    }
}

