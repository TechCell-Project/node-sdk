/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * The documentations of the TechCell RESTful API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ProductDto } from '../models';
// @ts-ignore
import { ProductInfinityPaginationResult } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get product by id
         * @summary Get product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerGetProductById: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsControllerGetProductById', 'productId', productId)
            const localVarPath = `/api/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get product list with pagination and filter
         * @summary Get products
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterProductsDto
         * @param {string} [sort] JSON string of SortProductsDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerGetProducts: async (page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get product by id
         * @summary Get product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerGetProductById(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerGetProductById(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerGetProductById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get product list with pagination and filter
         * @summary Get products
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterProductsDto
         * @param {string} [sort] JSON string of SortProductsDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerGetProducts(page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductInfinityPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerGetProducts(page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerGetProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Get product by id
         * @summary Get product
         * @param {ProductsApiProductsControllerGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerGetProductById(requestParameters: ProductsApiProductsControllerGetProductByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductDto> {
            return localVarFp.productsControllerGetProductById(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get product list with pagination and filter
         * @summary Get products
         * @param {ProductsApiProductsControllerGetProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerGetProducts(requestParameters: ProductsApiProductsControllerGetProductsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProductInfinityPaginationResult> {
            return localVarFp.productsControllerGetProducts(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for productsControllerGetProductById operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerGetProductByIdRequest
 */
export interface ProductsApiProductsControllerGetProductByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiProductsControllerGetProductById
     */
    readonly productId: string
}

/**
 * Request parameters for productsControllerGetProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerGetProductsRequest
 */
export interface ProductsApiProductsControllerGetProductsRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiProductsControllerGetProducts
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProductsApiProductsControllerGetProducts
     */
    readonly limit?: number

    /**
     * JSON string of FilterProductsDto
     * @type {string}
     * @memberof ProductsApiProductsControllerGetProducts
     */
    readonly filters?: string

    /**
     * JSON string of SortProductsDto[]
     * @type {string}
     * @memberof ProductsApiProductsControllerGetProducts
     */
    readonly sort?: string
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Get product by id
     * @summary Get product
     * @param {ProductsApiProductsControllerGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerGetProductById(requestParameters: ProductsApiProductsControllerGetProductByIdRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerGetProductById(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get product list with pagination and filter
     * @summary Get products
     * @param {ProductsApiProductsControllerGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerGetProducts(requestParameters: ProductsApiProductsControllerGetProductsRequest = {}, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerGetProducts(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}

