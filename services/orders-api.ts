/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * The documentations of the TechCell RESTful API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CancelOrderDto } from '../models';
// @ts-ignore
import { CreateOrderDto } from '../models';
// @ts-ignore
import { Order } from '../models';
// @ts-ignore
import { OrderInfinityPaginationResult } from '../models';
// @ts-ignore
import { PreviewOrderDto } from '../models';
// @ts-ignore
import { PreviewOrderResponseDto } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {CancelOrderDto} cancelOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCancelOrder: async (id: string, cancelOrderDto: CancelOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerCancelOrder', 'id', id)
            // verify required parameter 'cancelOrderDto' is not null or undefined
            assertParamExists('ordersControllerCancelOrder', 'cancelOrderDto', cancelOrderDto)
            const localVarPath = `/api/orders/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCreateOrder: async (createOrderDto: CreateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('ordersControllerCreateOrder', 'createOrderDto', createOrderDto)
            const localVarPath = `/api/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerGetOrderById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersControllerGetOrderById', 'id', id)
            const localVarPath = `/api/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterOrdersDto
         * @param {string} [sort] JSON string of SortOrdersDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerGetOrders: async (page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PreviewOrderDto} previewOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerPreviewOrder: async (previewOrderDto: PreviewOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'previewOrderDto' is not null or undefined
            assertParamExists('ordersControllerPreviewOrder', 'previewOrderDto', previewOrderDto)
            const localVarPath = `/api/orders/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(previewOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {CancelOrderDto} cancelOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerCancelOrder(id: string, cancelOrderDto: CancelOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerCancelOrder(id, cancelOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerCancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerCreateOrder(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerCreateOrder(createOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerCreateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerGetOrderById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerGetOrderById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerGetOrderById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterOrdersDto
         * @param {string} [sort] JSON string of SortOrdersDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerGetOrders(page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderInfinityPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerGetOrders(page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerGetOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PreviewOrderDto} previewOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersControllerPreviewOrder(previewOrderDto: PreviewOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreviewOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersControllerPreviewOrder(previewOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersControllerPreviewOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {OrdersApiOrdersControllerCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCancelOrder(requestParameters: OrdersApiOrdersControllerCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ordersControllerCancelOrder(requestParameters.id, requestParameters.cancelOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrdersApiOrdersControllerCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerCreateOrder(requestParameters: OrdersApiOrdersControllerCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.ordersControllerCreateOrder(requestParameters.createOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrdersApiOrdersControllerGetOrderByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerGetOrderById(requestParameters: OrdersApiOrdersControllerGetOrderByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.ordersControllerGetOrderById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrdersApiOrdersControllerGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerGetOrders(requestParameters: OrdersApiOrdersControllerGetOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrderInfinityPaginationResult> {
            return localVarFp.ordersControllerGetOrders(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrdersApiOrdersControllerPreviewOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersControllerPreviewOrder(requestParameters: OrdersApiOrdersControllerPreviewOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<PreviewOrderResponseDto> {
            return localVarFp.ordersControllerPreviewOrder(requestParameters.previewOrderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ordersControllerCancelOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersControllerCancelOrderRequest
 */
export interface OrdersApiOrdersControllerCancelOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiOrdersControllerCancelOrder
     */
    readonly id: string

    /**
     * 
     * @type {CancelOrderDto}
     * @memberof OrdersApiOrdersControllerCancelOrder
     */
    readonly cancelOrderDto: CancelOrderDto
}

/**
 * Request parameters for ordersControllerCreateOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersControllerCreateOrderRequest
 */
export interface OrdersApiOrdersControllerCreateOrderRequest {
    /**
     * 
     * @type {CreateOrderDto}
     * @memberof OrdersApiOrdersControllerCreateOrder
     */
    readonly createOrderDto: CreateOrderDto
}

/**
 * Request parameters for ordersControllerGetOrderById operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersControllerGetOrderByIdRequest
 */
export interface OrdersApiOrdersControllerGetOrderByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiOrdersControllerGetOrderById
     */
    readonly id: string
}

/**
 * Request parameters for ordersControllerGetOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersControllerGetOrdersRequest
 */
export interface OrdersApiOrdersControllerGetOrdersRequest {
    /**
     * 
     * @type {number}
     * @memberof OrdersApiOrdersControllerGetOrders
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof OrdersApiOrdersControllerGetOrders
     */
    readonly limit?: number

    /**
     * JSON string of FilterOrdersDto
     * @type {string}
     * @memberof OrdersApiOrdersControllerGetOrders
     */
    readonly filters?: string

    /**
     * JSON string of SortOrdersDto[]
     * @type {string}
     * @memberof OrdersApiOrdersControllerGetOrders
     */
    readonly sort?: string
}

/**
 * Request parameters for ordersControllerPreviewOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersControllerPreviewOrderRequest
 */
export interface OrdersApiOrdersControllerPreviewOrderRequest {
    /**
     * 
     * @type {PreviewOrderDto}
     * @memberof OrdersApiOrdersControllerPreviewOrder
     */
    readonly previewOrderDto: PreviewOrderDto
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @param {OrdersApiOrdersControllerCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerCancelOrder(requestParameters: OrdersApiOrdersControllerCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerCancelOrder(requestParameters.id, requestParameters.cancelOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrdersApiOrdersControllerCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerCreateOrder(requestParameters: OrdersApiOrdersControllerCreateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerCreateOrder(requestParameters.createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrdersApiOrdersControllerGetOrderByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerGetOrderById(requestParameters: OrdersApiOrdersControllerGetOrderByIdRequest, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerGetOrderById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrdersApiOrdersControllerGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerGetOrders(requestParameters: OrdersApiOrdersControllerGetOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerGetOrders(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrdersApiOrdersControllerPreviewOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersControllerPreviewOrder(requestParameters: OrdersApiOrdersControllerPreviewOrderRequest, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersControllerPreviewOrder(requestParameters.previewOrderDto, options).then((request) => request(this.axios, this.basePath));
    }
}

