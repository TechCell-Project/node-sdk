/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * The documentations of the TechCell RESTful API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddSerialNumberDto } from '../models';
// @ts-ignore
import { AddSerialNumberResponseDto } from '../models';
// @ts-ignore
import { CreateSkuDto } from '../models';
// @ts-ignore
import { SKU } from '../models';
// @ts-ignore
import { SerialNumber } from '../models';
// @ts-ignore
import { SkuInfinityPaginationResult } from '../models';
// @ts-ignore
import { UpdateSkuDto } from '../models';
/**
 * SkusApi - axios parameter creator
 * @export
 */
export const SkusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddSerialNumberDto} addSerialNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerAddSerialNumbers: async (id: string, addSerialNumberDto: AddSerialNumberDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skusControllerAddSerialNumbers', 'id', id)
            // verify required parameter 'addSerialNumberDto' is not null or undefined
            assertParamExists('skusControllerAddSerialNumbers', 'addSerialNumberDto', addSerialNumberDto)
            const localVarPath = `/api/skus/{id}/serial-numbers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSerialNumberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSkuDto} createSkuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerCreateSku: async (createSkuDto: CreateSkuDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSkuDto' is not null or undefined
            assertParamExists('skusControllerCreateSku', 'createSkuDto', createSkuDto)
            const localVarPath = `/api/skus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSkuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterSerialNumberDto
         * @param {string} [sort] JSON string of SortSerialNumberDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerGetSerialNumbers: async (id: string, page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skusControllerGetSerialNumbers', 'id', id)
            const localVarPath = `/api/skus/{id}/serial-numbers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerGetSkuById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skusControllerGetSkuById', 'id', id)
            const localVarPath = `/api/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterSkuDto
         * @param {string} [sort] JSON string of SortSkuDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerGetSkus: async (page?: number, limit?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/skus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkuDto} updateSkuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerUpdateSkuById: async (id: string, updateSkuDto: UpdateSkuDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skusControllerUpdateSkuById', 'id', id)
            // verify required parameter 'updateSkuDto' is not null or undefined
            assertParamExists('skusControllerUpdateSkuById', 'updateSkuDto', updateSkuDto)
            const localVarPath = `/api/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSkuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkusApi - functional programming interface
 * @export
 */
export const SkusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddSerialNumberDto} addSerialNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skusControllerAddSerialNumbers(id: string, addSerialNumberDto: AddSerialNumberDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSerialNumberResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skusControllerAddSerialNumbers(id, addSerialNumberDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkusApi.skusControllerAddSerialNumbers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateSkuDto} createSkuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skusControllerCreateSku(createSkuDto: CreateSkuDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skusControllerCreateSku(createSkuDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkusApi.skusControllerCreateSku']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterSerialNumberDto
         * @param {string} [sort] JSON string of SortSerialNumberDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skusControllerGetSerialNumbers(id: string, page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SerialNumber>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skusControllerGetSerialNumbers(id, page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkusApi.skusControllerGetSerialNumbers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skusControllerGetSkuById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skusControllerGetSkuById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkusApi.skusControllerGetSkuById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [filters] JSON string of FilterSkuDto
         * @param {string} [sort] JSON string of SortSkuDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skusControllerGetSkus(page?: number, limit?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuInfinityPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skusControllerGetSkus(page, limit, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkusApi.skusControllerGetSkus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkuDto} updateSkuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skusControllerUpdateSkuById(id: string, updateSkuDto: UpdateSkuDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skusControllerUpdateSkuById(id, updateSkuDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkusApi.skusControllerUpdateSkuById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SkusApi - factory interface
 * @export
 */
export const SkusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkusApiFp(configuration)
    return {
        /**
         * 
         * @param {SkusApiSkusControllerAddSerialNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerAddSerialNumbers(requestParameters: SkusApiSkusControllerAddSerialNumbersRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddSerialNumberResponseDto> {
            return localVarFp.skusControllerAddSerialNumbers(requestParameters.id, requestParameters.addSerialNumberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SkusApiSkusControllerCreateSkuRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerCreateSku(requestParameters: SkusApiSkusControllerCreateSkuRequest, options?: RawAxiosRequestConfig): AxiosPromise<SKU> {
            return localVarFp.skusControllerCreateSku(requestParameters.createSkuDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SkusApiSkusControllerGetSerialNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerGetSerialNumbers(requestParameters: SkusApiSkusControllerGetSerialNumbersRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SerialNumber>> {
            return localVarFp.skusControllerGetSerialNumbers(requestParameters.id, requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SkusApiSkusControllerGetSkuByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerGetSkuById(requestParameters: SkusApiSkusControllerGetSkuByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<SKU> {
            return localVarFp.skusControllerGetSkuById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SkusApiSkusControllerGetSkusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerGetSkus(requestParameters: SkusApiSkusControllerGetSkusRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SkuInfinityPaginationResult> {
            return localVarFp.skusControllerGetSkus(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SkusApiSkusControllerUpdateSkuByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skusControllerUpdateSkuById(requestParameters: SkusApiSkusControllerUpdateSkuByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.skusControllerUpdateSkuById(requestParameters.id, requestParameters.updateSkuDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for skusControllerAddSerialNumbers operation in SkusApi.
 * @export
 * @interface SkusApiSkusControllerAddSerialNumbersRequest
 */
export interface SkusApiSkusControllerAddSerialNumbersRequest {
    /**
     * 
     * @type {string}
     * @memberof SkusApiSkusControllerAddSerialNumbers
     */
    readonly id: string

    /**
     * 
     * @type {AddSerialNumberDto}
     * @memberof SkusApiSkusControllerAddSerialNumbers
     */
    readonly addSerialNumberDto: AddSerialNumberDto
}

/**
 * Request parameters for skusControllerCreateSku operation in SkusApi.
 * @export
 * @interface SkusApiSkusControllerCreateSkuRequest
 */
export interface SkusApiSkusControllerCreateSkuRequest {
    /**
     * 
     * @type {CreateSkuDto}
     * @memberof SkusApiSkusControllerCreateSku
     */
    readonly createSkuDto: CreateSkuDto
}

/**
 * Request parameters for skusControllerGetSerialNumbers operation in SkusApi.
 * @export
 * @interface SkusApiSkusControllerGetSerialNumbersRequest
 */
export interface SkusApiSkusControllerGetSerialNumbersRequest {
    /**
     * 
     * @type {string}
     * @memberof SkusApiSkusControllerGetSerialNumbers
     */
    readonly id: string

    /**
     * 
     * @type {number}
     * @memberof SkusApiSkusControllerGetSerialNumbers
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SkusApiSkusControllerGetSerialNumbers
     */
    readonly limit?: number

    /**
     * JSON string of FilterSerialNumberDto
     * @type {string}
     * @memberof SkusApiSkusControllerGetSerialNumbers
     */
    readonly filters?: string

    /**
     * JSON string of SortSerialNumberDto[]
     * @type {string}
     * @memberof SkusApiSkusControllerGetSerialNumbers
     */
    readonly sort?: string
}

/**
 * Request parameters for skusControllerGetSkuById operation in SkusApi.
 * @export
 * @interface SkusApiSkusControllerGetSkuByIdRequest
 */
export interface SkusApiSkusControllerGetSkuByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof SkusApiSkusControllerGetSkuById
     */
    readonly id: string
}

/**
 * Request parameters for skusControllerGetSkus operation in SkusApi.
 * @export
 * @interface SkusApiSkusControllerGetSkusRequest
 */
export interface SkusApiSkusControllerGetSkusRequest {
    /**
     * 
     * @type {number}
     * @memberof SkusApiSkusControllerGetSkus
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SkusApiSkusControllerGetSkus
     */
    readonly limit?: number

    /**
     * JSON string of FilterSkuDto
     * @type {string}
     * @memberof SkusApiSkusControllerGetSkus
     */
    readonly filters?: string

    /**
     * JSON string of SortSkuDto[]
     * @type {string}
     * @memberof SkusApiSkusControllerGetSkus
     */
    readonly sort?: string
}

/**
 * Request parameters for skusControllerUpdateSkuById operation in SkusApi.
 * @export
 * @interface SkusApiSkusControllerUpdateSkuByIdRequest
 */
export interface SkusApiSkusControllerUpdateSkuByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof SkusApiSkusControllerUpdateSkuById
     */
    readonly id: string

    /**
     * 
     * @type {UpdateSkuDto}
     * @memberof SkusApiSkusControllerUpdateSkuById
     */
    readonly updateSkuDto: UpdateSkuDto
}

/**
 * SkusApi - object-oriented interface
 * @export
 * @class SkusApi
 * @extends {BaseAPI}
 */
export class SkusApi extends BaseAPI {
    /**
     * 
     * @param {SkusApiSkusControllerAddSerialNumbersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkusApi
     */
    public skusControllerAddSerialNumbers(requestParameters: SkusApiSkusControllerAddSerialNumbersRequest, options?: RawAxiosRequestConfig) {
        return SkusApiFp(this.configuration).skusControllerAddSerialNumbers(requestParameters.id, requestParameters.addSerialNumberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SkusApiSkusControllerCreateSkuRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkusApi
     */
    public skusControllerCreateSku(requestParameters: SkusApiSkusControllerCreateSkuRequest, options?: RawAxiosRequestConfig) {
        return SkusApiFp(this.configuration).skusControllerCreateSku(requestParameters.createSkuDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SkusApiSkusControllerGetSerialNumbersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkusApi
     */
    public skusControllerGetSerialNumbers(requestParameters: SkusApiSkusControllerGetSerialNumbersRequest, options?: RawAxiosRequestConfig) {
        return SkusApiFp(this.configuration).skusControllerGetSerialNumbers(requestParameters.id, requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SkusApiSkusControllerGetSkuByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkusApi
     */
    public skusControllerGetSkuById(requestParameters: SkusApiSkusControllerGetSkuByIdRequest, options?: RawAxiosRequestConfig) {
        return SkusApiFp(this.configuration).skusControllerGetSkuById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SkusApiSkusControllerGetSkusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkusApi
     */
    public skusControllerGetSkus(requestParameters: SkusApiSkusControllerGetSkusRequest = {}, options?: RawAxiosRequestConfig) {
        return SkusApiFp(this.configuration).skusControllerGetSkus(requestParameters.page, requestParameters.limit, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SkusApiSkusControllerUpdateSkuByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkusApi
     */
    public skusControllerUpdateSkuById(requestParameters: SkusApiSkusControllerUpdateSkuByIdRequest, options?: RawAxiosRequestConfig) {
        return SkusApiFp(this.configuration).skusControllerUpdateSkuById(requestParameters.id, requestParameters.updateSkuDto, options).then((request) => request(this.axios, this.basePath));
    }
}

